
@model X.PagedList.IPagedList<OnlineStore.Data.Entities.Product>

@{
    ViewData["Title"] = "Product";
}

<h2>Product List</h2>

<p>
    <a asp-action="Create" class="btn btn-dark">Create New</a>
</p>
<div>
    <form asp-action="Index" method="get">
        <input id="search" name="search" value="@ViewBag.Search" />
        <button id="btnSearch">جستجو</button>
    </form>
</div>

@{

    string sort1 = "Name_desc";
    string sort2 = "NameFa";
    string sort3 = "Brand";

    string sort = Context.Request.Query["sort"];

    if (!string.IsNullOrEmpty(sort))
    {
        if (sort == "Name_desc")
        {
            sort1 = "Name";
        }
        else if (sort == "NameFa")
        {
            sort1 = "Name";
            sort2 = "NameFa_desc";
        }
        else if (sort == "NameFa_desc")
        {
            sort1 = "Name";
            sort2 = "NameFa";
        }
        else if (sort == "Brand")
        {
            sort1 = "Name";
            sort3 = "Brand_desc";
        }
        else if (sort == "Brand_desc")
        {
            sort1 = "Name";
            sort3 = "Brand";
        }
    }
}

<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sort="@sort1">Name</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sort="@sort2">NameFa</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sort="@sort3">Brand</a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    <a asp-action="Details" asp-route-id="@item.ID">   @Html.DisplayFor(modelItem => item.Name)</a>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NameFa)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Brand.Name)
                </td>
                <td>
                    <div class="d-flex flex-nowrap">
                        <a asp-action="Edit" class="btn btn-success" asp-route-id="@item.ID">Edit</a>&nbsp;<a asp-action="Delete" class="btn btn-danger" asp-route-id="@item.ID">Delete</a>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@Html.PagedListPager(Model, page => Url.Action("Index", new { page = page, search = Context.Request.Query["search"], sort = Context.Request.Query["sort"] }),
    X.PagedList.Mvc.Common.PagedListRenderOptions.ClassicPlusFirstAndLast)
